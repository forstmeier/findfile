Description: API resources definition

Parameters:

  ProjectEmail:
    Type: String
    Description: Email address for the project owner
  AccountIDHTTPHeader:
    Type: String
    Description: HTTP header for receiving account IDs in the API
  ArtifactBucket:
    Type: String
    Description: Storage location for all code and application artifacts - built separate from stack
  StorageBucket:
    Type: String
    Description: Storage location for all user files in application - built separate from stack
  DatabaseName:
    Type: String
    Description: Glue database name for querying document data
  MetadataTableName:
    Type: String
    Description: Glue metadata table name for querying document data
  CertificateARN:
    Type: String
    Description: Certificate ARN for the project domain name
  DomainName:
    Type: String
    Description: Custom domain name for project API
    Default: api.cheesesteak.io
  StageName:
    Type: String
    Description: Stage the API is deployed on
    Default: production
    AllowedValues:
    - production
  DomainHostedZoneID:
    Type: String
    Description: ID for the custom domain hosted zone
  NotificationConfigurationID:
    Type: String
    Description: ID for the S3 event notification configured on the user bucket

Resources:

  fileEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: cheesesteak-file-events

  fileEventsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: fileEventsTopic
          Condition:
            StringEquals:
              aws:SourceAccount:
                Ref: AWS::AccountId
      Topics:
        - Ref: fileEventsTopic

  fileEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
        - dbFunction
        - Arn
      Protocol: lambda
      TopicArn:
        Ref: fileEventsTopic

  dbStore:
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Name:
          Ref: DatabaseName

  dbCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName:
        Ref: dbStore
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_NEW_FOLDERS_ONLY
      Role:
        Fn::GetAtt:
        - dbStoreRole
        - Arn
      Targets:
        S3Targets:
        - Path:
            Fn::Join:
            - ''
            - - s3://
              - Ref: StorageBucket
              - documents
        - Path:
            Fn::Join:
            - ''
            - - s3://
              - Ref: StorageBucket
              - pages
        - Path:
            Fn::Join:
            - ''
            - - s3://
              - Ref: StorageBucket
              - lines

  dbStoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: glue.amazonaws.com
          Action: sts:AssumeRole
      Description: Role for allowing Glue crawler actions
      Path: /
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - glue:*
            Effect: Allow
            Resource: 
              Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:*
        PolicyName: dbStorePolicy

  acctFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket:
          Ref: ArtifactBucket 
        S3Key: acct.zip
      Description: Function providing user account management
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: DatabaseName
          STORAGE_BUCKET:
            Ref: StorageBucket
          ACCOUNT_ID_HTTP_HEADER:
            Ref: AccountIDHTTPHeader
          TABLE_NAME:
            Ref: acctTable
          METADATA_TABLE_NAME:
            Ref: MetadataTableName
          CATALOG_ID:
            Ref: AWS::AccountId
          NOTIFICATION_CONFIGURATION_ID:
            Ref: NotificationConfigurationID
          EVENTS_TOPIC_ARN:
            Ref: fileEventsTopic
          CRAWLER_NAME:
            Ref: dbCrawler
      FunctionName: acctFunction
      Handler: acct
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - acctRole
        - Arn
      Runtime: go1.x
      Timeout: 5

  dbFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: db.zip
      Description: Function providing parsed user document management
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: DatabaseName
          STORAGE_BUCKET:
            Ref: StorageBucket
          TABLE_NAME:
            Ref: acctTable
      FunctionName: dbFunction
      Handler: db
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - dbRole
        - Arn
      Runtime: go1.x
      Timeout: 10

  queryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: query.zip
      Description: Function providing user query handling
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: DatabaseName
          STORAGE_BUCKET:
            Ref: StorageBucket
          ACCOUNT_ID_HTTP_HEADER:
            Ref: AccountIDHTTPHeader
          TABLE_NAME:
            Ref: acctTable
      FunctionName: queryFunction
      Handler: query
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - queryRole
        - Arn
      Runtime: go1.x
      Timeout: 5

  acctRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: Role for managing user accounts in acctFunction
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - acctTable
              - Arn
          - Action:
            - glue:CreatePartition
            - glue:DeletePartition
            Effect: Allow
            Resource:
            - Fn::Sub:
              - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${databaseName}/*
              - databaseName:
                  Ref: dbStore
            - Fn::Sub:
              - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${databaseName}
              - databaseName:
                  Ref: dbStore
            - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
          - Action:
            - s3:PutObject
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${StorageBucket}/*
        PolicyName: acctPolicy
      RoleName: cheesesteak-acct-role

  dbRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: Role for parsing provided files into documents in dbFunction
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - textract:DetectDocumentText
            Effect: Allow
            Resource: "*"
          - Action:
            - s3:DeleteObject
            - s3:GetObject
            - s3:PutObject
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:s3:::${StorageBucket}/*
        PolicyName: dbPolicy
      RoleName: cheesesteak-db-role

  queryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Description: Role for querying stored documents in queryFunction
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - acctTable
              - Arn
        PolicyName: queryPolicy

  acctTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: bucket_name
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: bucketNameIndex
        KeySchema:
        - AttributeName: bucket_name
          KeyType: HASH
        Projection:
          ProjectionType: ALL # possibly reduce later

  api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: "2.0"
        info:
          title: Cheesesteak API
          version: "0.1"
        schemes:
        - https
        paths:
          /account:
            post:
              produces:
              - application/json
              responses:
                "200":
                  description: Successful account POST request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      acount_id:
                        type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${acctFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY
            delete:
              produces:
              - application/json
              responses:
                "200":
                  description: Successful account DELETE request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      acount_id:
                        type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${acctFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY
          /query:
            post:
              produces:
              - application/json
              responses:
                "200":
                  description: Successful query POST request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      filenames:
                        type: array
                        items:
                          type: string
                      presigned_urls:
                        type: array
                        items:
                          type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${queryFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY

  acctFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - acctFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  dbFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - dbFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  dbFunctionEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - dbFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: fileEventsTopic

  queryFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - queryFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  domainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      CertificateArn:
        Ref: CertificateARN
      DomainName:
        Ref: DomainName
      SecurityPolicy: TLS_1_2

  domainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName:
          Ref: DomainName
        HostedZoneId:
          Ref: DomainHostedZoneID

  domainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: DomainHostedZoneID
      Name:
        Ref: DomainName
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - domainName
          - DistributionHostedZoneId
        DNSName:
          Fn::GetAtt:
          - domainName
          - DistributionDomainName

  domainBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName:
        Ref: DomainName
      RestApiId:
        Ref: api
      Stage:
        Ref: StageName
    DependsOn: apiDeployment

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId:
        Ref: api
      StageName:
        Ref: StageName
      StageDescription:
        MetricsEnabled: true
        LoggingLevel: ERROR

  apiAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn:
        Fn::GetAtt:
        - accountRole
        - Arn

  accountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole        
      Description: Role for allowing API Gateway to write logs to CloudWatch
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  budget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget: 
        BudgetLimit: 
          Amount: 50.00
          Unit: USD
        BudgetName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - budget
        BudgetType: COST
        TimeUnit: MONTHLY
      NotificationsWithSubscribers:
      - Notification: 
          ComparisonOperator: EQUAL_TO
          NotificationType: ACTUAL
          Threshold: 100.00
        Subscribers: 
        - Address:
            Ref: ProjectEmail
          SubscriptionType: EMAIL

Outputs:
  Stackname:
    Value:
      Ref: AWS::StackName
  ArtifactBucketName:
    Value:
      Ref: ArtifactBucket
  StorageBucketName:
    Value:
      Ref: StorageBucket
  FileEventsTopicARN:
    Value:
      Ref: fileEventsTopic
  ExternalAPIEndpoint:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: DomainName
  InternalAPIEndpoint:
    Value:
      Fn::Sub:
      - https://${api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
      - Stage:
          Ref: StageName