Description: API resources definition

Parameters:

  StackName:
    Type: String
    Description: Name for the project and stack resources
    Default: findfile
    AllowedPattern: '[A-Za-z0-9_]+'
  HTTPSecurityKey:
    Type: String
    Description: UUID to use in query request header
  ArtifactBucket:
    Type: String
    Description: Storage location for all code and application artifacts
  DatabaseBucket:
    Type: String
    Description: Storage location for all application database documents
  StageName:
    Type: String
    Description: Stage the API is deployed to
    Default: production
    AllowedValues:
      - production

Resources:

  database:
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Name:
          Fn::Sub: ${StackName}
        Description: Main database for querying functionality

  documentsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: documents
        StorageDescriptor:
          Columns:
            - Name: id
              Type: string
            - Name: entity
              Type: string
            - Name: file_key
              Type: string
            - Name: file_bucket
              Type: string
          Location:
            Fn::Sub: s3://${DatabaseBucket}/documents/
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
            Parameters:
              CrawlerSchemaSerializerVersion: 1.0
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
        TableType: EXTERNAL_TABLE
    DependsOn: database

  pagesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: pages
        StorageDescriptor:
          Columns:
            - Name: id
              Type: string
            - Name: document_id
              Type: string
            - Name: entity
              Type: string
            - Name: page_number
              Type: int
          Location:
            Fn::Sub: s3://${DatabaseBucket}/pages/
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
            Parameters:
              CrawlerSchemaSerializerVersion: 1.0
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
        TableType: EXTERNAL_TABLE
    DependsOn: database

  linesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: lines
        StorageDescriptor:
          Columns:
            - Name: id
              Type: string
            - Name: page_id
              Type: string
            - Name: entity
              Type: string
            - Name: text
              Type: string
          Location:
            Fn::Sub: s3://${DatabaseBucket}/lines/
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
            Parameters:
              CrawlerSchemaSerializerVersion: 1.0
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
        TableType: EXTERNAL_TABLE
    DependsOn: database

  coordinatesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: coordinates
        StorageDescriptor:
          Columns:
            - Name: id
              Type: string
            - Name: line_id
              Type: string
            - Name: entity
              Type: string
            - Name: top_left_x
              Type: float
            - Name: top_left_y
              Type: float
            - Name: top_right_x
              Type: float
            - Name: top_right_y
              Type: float
            - Name: bottom_left_x
              Type: float
            - Name: bottom_left_y
              Type: float
            - Name: bottom_right_x
              Type: float
            - Name: bottom_right_y
              Type: float
          Location:
            Fn::Sub: s3://${DatabaseBucket}/coordinates/
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
            Parameters:
              CrawlerSchemaSerializerVersion: 1.0
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
        TableType: EXTERNAL_TABLE
    DependsOn: database

  databaseBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DatabaseBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:*
            Resource:
              Fn::Sub: arn:aws:s3:::${DatabaseBucket}
            Principal:
              AWS:
                - Fn::GetAtt:
                    - setupFunctionRole
                    - Arn
                - Fn::GetAtt:
                    - databaseFunctionRole
                    - Arn
                - Fn::GetAtt:
                    - queryFunctionRole
                    - Arn
    DependsOn:
      - setupFunction
      - databaseFunction
      - queryFunction

  setupCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - setupFunction
          - Arn
      DATABASE_NAME:
        Ref: database
      DATABASE_BUCKET:
        Ref: DatabaseBucket
    DependsOn: setupFunction

  setupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: setup.zip
      Description: Function providing database setup logic
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: database
          DATABASE_BUCKET:
            Ref: DatabaseBucket
      Handler: setup
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - setupFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5
    DependsOn: setupFunctionRole

  databaseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: database.zip
      Description: Function providing database document management
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: database
          DATABASE_BUCKET:
            Ref: DatabaseBucket
      Handler: database
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - databaseFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 10
    DependsOn:
      - databaseFunctionRole

  queryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: query.zip
      Description: Function providing database query handling
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: database
          DATABASE_BUCKET:
            Ref: DatabaseBucket
          HTTP_SECURITY_HEADER:
            Fn::Sub: x-${StackName}-security-key
          HTTP_SECURITY_KEY:
            Ref: HTTPSecurityKey
      Handler: query
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - queryFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5

  setupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for setting up the database resources
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DatabaseBucket}/*
          PolicyName:
            Fn::Sub: ${StackName}-setup-function-policy

  databaseFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for parsing provided files into documents
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                Effect: Allow
                Resource:
                  Fn::Sub: arn:aws:athena:${AWS::Region}:${AWS::AccountId}:*
              - Action:
                  - glue:GetTable
                  - glue:GetTables
                  - glue:SearchTables
                  - glue:GetDatabase
                  - glue:GetDatabases
                Effect: Allow
                Resource:
                  Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:*
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DatabaseBucket}/*
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::*
              - Action:
                  - textract:DetectDocumentText
                Effect: Allow
                Resource: '*'
          PolicyName:
            Fn::Sub: ${StackName}-database-function-policy

  queryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for querying stored database documents
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                Effect: Allow
                Resource:
                  Fn::Sub: arn:aws:athena:${AWS::Region}:${AWS::AccountId}:*
              - Action:
                  - glue:GetTable
                  - glue:GetTables
                  - glue:SearchTables
                  - glue:GetDatabase
                  - glue:GetDatabases
                Effect: Allow
                Resource:
                  Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:*
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DatabaseBucket}/*
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::*
          PolicyName:
            Fn::Sub: ${StackName}-query-function-policy

  api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body:
        swagger: '2.0'
        info:
          title:
            Fn::Sub: ${StackName} API
          version: '0.1'
        schemes:
          - https
        paths:
          /query:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: Successful query POST request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      filenames:
                        type: array
                        items:
                          type: string
                      presigned_urls:
                        type: array
                        items:
                          type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${queryFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY

  databaseFunctionEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - databaseFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::*

  queryFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - queryFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId:
        Ref: api
      StageName:
        Ref: StageName
      StageDescription:
        MetricsEnabled: true
        LoggingLevel: ERROR

  apiAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn:
        Fn::GetAtt:
          - apiAccountRole
          - Arn

  apiAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole        
      Description: Role for allowing API Gateway to write logs to CloudWatch
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

Outputs:
  HTTPSecurityKeyHeader:
    Value:
      Fn::Sub: x-${StackName}-security-key
  HTTPSecurityKeyValue:
    Value:
      Ref: HTTPSecurityKey
  SetupFunctionName:
    Value:
      Ref: setupFunction
  DatabaseFunctionName:
    Value:
      Ref: databaseFunction
  QueryFunctionName:
    Value:
      Ref: queryFunction
  DatabaseFunctionARN:
    Value:
      Fn::GetAtt:
        - databaseFunction
        - Arn
  QueryFunctionRoleARN:
    Value:
      Fn::GetAtt:
        - queryFunctionRole
        - Arn
  QueryAPIEndpoint:
    Value:
      Fn::Sub: https://${api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/query