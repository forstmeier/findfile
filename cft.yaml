Description: API resources definition

Parameters:

  StackName:
    Type: String
    Description: Name for the project and stack resources
    Default: findfile
    AllowedPattern: '[A-Za-z0-9_]+'
  HTTPSecurityKey:
    Type: String
    Description: UUID to use in query request header
  ArtifactBucket:
    Type: String
    Description: Storage location for all code and application artifacts
  StageName:
    Type: String
    Description: Stage the API is deployed to
    Default: production
    AllowedValues:
      - production

Resources:

  bucketsListener:
    Type: AWS::CloudTrail::Trail
    Properties: 
      IsMultiRegionTrail: true
      S3BucketName:
        Ref: ArtifactBucket

  bucketsEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule for triggering Lambdas based on S3 bucket events
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
            - DeleteObjects
      State: ENABLED
      Targets:
        - Arn:
          Fn::GetAtt:
            - filesFunctionRole
            - Arn
          Id: event-target-id

  database:
    Type: AWS::OpenSearchService::Domain
    Properties: 
      DomainEndpointOptions:
        EnforceHTTPS: true

  bucketsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: buckets.zip
      Description: Function for managing file activity listeners on target buckets
      Environment:
        Variables:
          TRAIL_NAME:
            Ref: bucketsListener
          HTTP_SECURITY_HEADER:
            Fn::Sub: x-${StackName}-security-key
          HTTP_SECURITY_KEY:
            Ref: HTTPSecurityKey
      Handler: buckets
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - bucketsFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5
      DependsOn:
        - bucketsFunctionRole

  documentsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: documents.zip
      Description: Function for managing user queries against stored documents
      Environment:
        Variables:
          HTTP_SECURITY_HEADER:
            Fn::Sub: x-${StackName}-security-key
          HTTP_SECURITY_KEY:
            Ref: HTTPSecurityKey
      Handler: documents
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - documentsFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5
      DependsOn:
        - documentsFunctionRole

  filesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: files.zip
      Description: Function for managing stored documents based on target file activity
      Environment:
        Variables:
          HTTP_SECURITY_HEADER:
            Fn::Sub: x-${StackName}-security-key
          HTTP_SECURITY_KEY:
            Ref: HTTPSecurityKey
      Handler: files
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - filesFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5
      DependsOn:
        - filesFunctionRole

  bucketsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for adjusting file listener configurations
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudtrail:GetEventSelectors
                  - cloudtrail:PutEventSelectors
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - bucketsListener
                    - Arn
          PolicyName:
            Fn::Sub: ${StackName}-setup-function-policy

  api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body:
        swagger: '2.0'
        info:
          title:
            Fn::Sub: ${StackName} API
          version: '0.1'
        schemes:
          - https
        paths:
          /buckets:
            put:
              produces:
                - application/json
              responses:
                '200':
                  description: Successful bucket file listeners PUT request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      buckets_added:
                        type: integer
                      buckets_removed:
                        type: integer
              x-amazon-apigateway-integration:
                httpMethod: PUT
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${bucketsFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY
          /documents:
            put:
              produces:
                - application/json
              responses:
                '200':
                  description: Successful documents query GET request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      file_paths:
                        type: array
                        items:
                          type: string
              x-amazon-apigateway-integration:
                httpMethod: GET
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${documentsFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY

  bucketsFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - bucketsFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  documentsFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - documentsFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  filesFunctionEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - filesFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - bucketsListener
          - Arn

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId:
        Ref: api
      StageName:
        Ref: StageName
      StageDescription:
        MetricsEnabled: true
        LoggingLevel: ERROR

  apiAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn:
        Fn::GetAtt:
          - apiAccountRole
          - Arn

  apiAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole        
      Description: Role for allowing API Gateway to write logs to CloudWatch
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

Outputs:

  HTTPSecurityKeyHeader:
    Value:
      Fn::Sub: x-${StackName}-security-key
  HTTPSecurityKeyValue:
    Value:
      Ref: HTTPSecurityKey
  BucketsFunctionName:
    Value:
      Ref: bucketsFunction
  DocumentsFunctionName:
    Value:
      Ref: documentsFunction
  FilesFunctionName:
    Value:
      Ref: filesFunction
  BucketsAPIEndpoint:
    Value:
      Fn::Sub: https://${api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/buckets
  DocumentsAPIEndpoint:
    Value:
      Fn::Sub: https://${api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/documents