Description: API resources definition

Parameters:

  ProjectName:
    Type: String
    Description: Name for the project and stack resources
  HTTPSecurityKey:
    Type: String
    Description: UUID to use in query request header
  ArtifactBucket:
    Type: String
    Description: Storage location for all code and application artifacts
  DatabaseBucket:
    Type: String
    Description: Storage location for all application database documents
  StageName:
    Type: String
    Description: Stage the API is deployed to
    Default: production
    AllowedValues:
      - production

Resources:

  database:
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Name:
          Fn::Sub: ${ProjectName}_database

  databaseBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DatabaseBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: s3:*
            Resource:
              Fn::Sub: arn:aws:s3:::${DatabaseBucket}
            Principal:
              AWS:
                - Fn::GetAtt:
                    - databaseFunctionRole
                    - Arn
                - Fn::GetAtt:
                    - setupFunctionRole
                    - Arn
    DependsOn:
      - databaseFunction
      - setupFunction

  documentsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: documents
        StorageDescriptor:
          Columns:
            - Name: id
            - Name: entity
            - Name: file_key
            - Name: file_bucket
          Location:
            Fn::Sub: s3://${DatabaseBucket}/documents/
    DependsOn: database

  pagesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: pages
        StorageDescriptor:
          Columns:
            - Name: id
            - Name: entity
            - Name: page_number
          Location:
            Fn::Sub: s3://${DatabaseBucket}/pages/
    DependsOn: database

  linesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: lines
        StorageDescriptor:
          Columns:
            - Name: id
            - Name: entity
            - Name: text
          Location:
            Fn::Sub: s3://${DatabaseBucket}/lines/
    DependsOn: database

  coordinatesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseName:
        Ref: database
      TableInput:
        Name: coordinates
        StorageDescriptor:
          Columns:
            - Name: id
            - Name: top_left
            - Name: top_right
            - Name: bottom_left
            - Name: bottom_right
          Location:
            Fn::Sub: s3://${DatabaseBucket}/coordinates/
    DependsOn: database

  databaseCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName:
        Ref: database
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_NEW_FOLDERS_ONLY
      Role:
        Fn::GetAtt:
          - databaseRole
          - Arn
      Targets:
        S3Targets:
          - Path:
              Fn::Sub: s3://${DatabaseBucket}/documents
          - Path:
              Fn::Sub: s3://${DatabaseBucket}/pages
          - Path:
              Fn::Sub: s3://${DatabaseBucket}/lines
          - Path:
              Fn::Sub: s3://${DatabaseBucket}/coordinates
    DependsOn: database

  databaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for allowing Glue crawler actions
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - glue:*
                Effect: Allow
                Resource: 
                  Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:*
          PolicyName: databasePolicy

  setupCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - setupFunction
          - Arn
      DATABASE_NAME:
        Ref: database
      DATABASE_BUCKET:
        Ref: DatabaseBucket
      CRAWLER_NAME:
        Ref: databaseCrawler
    DependsOn: setupFunction

  databaseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: database.zip
      Description: Function providing parsed user document management
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: database
          DATABASE_BUCKET:
            Ref: DatabaseBucket
          CRAWLER_NAME:
            Ref: databaseCrawler
      FunctionName: databaseFunction
      Handler: database
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - databaseFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 10
    DependsOn:
      - databaseFunctionRole

  queryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: query.zip
      Description: Function providing user query handling
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: database
          DATABASE_BUCKET:
            Ref: DatabaseBucket
          HTTP_SECURITY_HEADER:
            Fn::Sub: x-${ProjectName}-security-key
          HTTP_SECURITY_KEY:
            Ref: HTTPSecurityKey
          CRAWLER_NAME:
            Ref: databaseCrawler
      FunctionName: queryFunction
      Handler: query
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - queryFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5

  setupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactBucket
        S3Key: setup.zip
      Description: Function providing database setup logic
      Environment:
        Variables:
          DATABASE_NAME:
            Ref: database
          DATABASE_BUCKET:
            Ref: DatabaseBucket
          CRAWLER_NAME:
            Ref: databaseCrawler
      FunctionName: setupFunction
      Handler: setup
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - setupFunctionRole
          - Arn
      Runtime: go1.x
      Timeout: 5
    DependsOn: setupFunctionRole

  databaseFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for parsing provided files into documents in dbFunction
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - textract:DetectDocumentText
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DatabaseBucket}/*
          PolicyName: databaseFunctionPolicy
      RoleName:
        Fn::Sub: ${ProjectName}-database-role

  queryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for querying stored documents in queryFunction
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  setupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: Role for creating folders and starting the Glue cralwer in setupFunction
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - glue:StartCrawler
                Effect: Allow
                Resource:
                  - Fn::Sub:
                      - arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/${crawlerName}
                      - crawlerName:
                          Ref: databaseCrawler
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DatabaseBucket}
          PolicyName: setupFunctionPolicy

  api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body:
        swagger: "2.0"
        info:
          title:
            Fn::Sub: ${ProjectName} API
          version: "0.1"
        schemes:
          - https
        paths:
          /query:
            post:
              produces:
                - application/json
              responses:
                "200":
                  description: Successful query POST request
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                      filenames:
                        type: array
                        items:
                          type: string
                      presigned_urls:
                        type: array
                        items:
                          type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${queryFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: AWS_PROXY

  databaseFunctionEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - databaseFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${DatabaseBucket}

  queryFunctionAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - queryFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${api}/*

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId:
        Ref: api
      StageName:
        Ref: StageName
      StageDescription:
        MetricsEnabled: true
        LoggingLevel: ERROR

  apiAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn:
        Fn::GetAtt:
          - apiAccountRole
          - Arn

  apiAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole        
      Description: Role for allowing API Gateway to write logs to CloudWatch
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

Outputs:
  Stackname:
    Value:
      Ref: AWS::StackName
  ArtifactBucketName:
    Value:
      Ref: ArtifactBucket
  DatabaseBucketName:
    Value:
      Ref: DatabaseBucket
  HTTPSecurityKey:
    Value:
      Ref: HTTPSecurityKey
  QueryFunctionRoleARN:
    Value:
      Fn::GetAtt:
        - queryFunctionRole
        - Arn
  RootAPIEndpoint:
    Value:
      Fn::Sub:
        - https://${api}.execute-api.${AWS::Region}.amazonaws.com/${stage}
        - stage:
            Ref: StageName
  QueryAPIEndpoint:
    Value:
      Fn::Sub:
        - https://${api}.execute-api.${AWS::Region}.amazonaws.com/${stage}/query
        - stage:
            Ref: StageName